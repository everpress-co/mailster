---
name: 'Create Release'

on:
  push:
    tags:
      - '*'

permissions: write-all
jobs:
  tagged-release:
    name: 'Create Release'
    runs-on: 'ubuntu-latest'
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      zip_name: ${{ steps.zip_project.outputs.zip_name }}

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ü§î Read version and project name from package.json
        id: read_version
        run: |

          VERSION=$(jq -r '.version' < package.json)
          PROJECT_NAME=$(jq -r '.name' < package.json)
          echo "Version is $VERSION"
          echo "Project name is $PROJECT_NAME"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: üåç Generate Translations
        uses: evrpress/action-wp-pot-generator@main
        with:
          save_path: './languages'
          item_slug: 'mailster'
          headers: '{"Last-Translator":"","Language-Team":"","Content-Type":"text\/plain; charset=UTF-8","Report-Msgid-Bugs-To":"https:\/\/mailster.co\/contact"}'

      - name: ü§û Install dependencies
        run: |
          npm install
          composer install --no-dev

      - name: üóúÔ∏è Minify Assets
        run: |
          npm install uglifycss -g
          for fname in ./assets/css/*.css ; do
            [ -f "$fname" ] || continue
            OUTPUT=$(echo "$fname" | sed "s/\.css/.min.css/")
            uglifycss $fname --output $OUTPUT
            echo "minify $fname"
          done
          npm install uglify-js -g
          for fname in ./assets/js/*.js ; do
            [ -f "$fname" ] || continue
            OUTPUT=$(echo "$fname" | sed "s/\.js/.min.js/")
            uglifyjs $fname --output $OUTPUT
            echo "minify $fname"
          done

      - name: üìö Convert Readme.md to WordPress Readme
        uses: everpress-co/action-md2wp@main

      - name: üèóÔ∏è Build
        run: |
          npm run build --no-dev

      - name: üßπ Cleanup
        run: |
          rm README.md

      - name: üóúÔ∏è Zip the contents of the dist directory with project name and version
        id: zip_project
        run: |
          ZIP_NAME="${{ steps.read_version.outputs.project_name }}-${{ steps.read_version.outputs.version }}.zip"
          npm run plugin-zip
          mv ${{ steps.read_version.outputs.project_name }}.zip $ZIP_NAME
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

          # zip location file
          zip -Tj mailster.pot.zip ./languages/mailster.pot

      - name: üöÄ Deploy to Freemius [Test]
        uses: buttonizer/freemius-deploy@v0.1.3
        with:
          file_name: ${{ steps.zip_project.outputs.zip_name }}
          release_mode: released
          version: ${{ steps.read_version.outputs.version }}
          sandbox: false
        env:
          PUBLIC_KEY: ${{ secrets.FREEMIUS_PUBLIC_KEY }}
          DEV_ID: 15334
          SECRET_KEY: ${{ secrets.FREEMIUS_SECRET_KEY }}
          PLUGIN_SLUG: ${{ steps.read_version.outputs.project_name }}
          PLUGIN_ID: 12132

      - name: üöÄ Deploy to Freemius
        uses: buttonizer/freemius-deploy@v0.1.3
        with:
          file_name: ${{ steps.zip_project.outputs.zip_name }}
          release_mode: pending
          version: ${{ steps.read_version.outputs.version }}
          sandbox: false
        env:
          PUBLIC_KEY: ${{ secrets.FREEMIUS_PUBLIC_KEY }}
          DEV_ID: 15334
          SECRET_KEY: ${{ secrets.FREEMIUS_SECRET_KEY }}
          PLUGIN_SLUG: ${{ steps.read_version.outputs.project_name }}
          PLUGIN_ID: 12184

      - name: üì¶ Create Release
        uses: 'marvinpinto/action-automatic-releases@v1.2.1'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: false
          files: |
            ${{ steps.zip_project.outputs.zip_name }}
            ./mailster.pot.zip
